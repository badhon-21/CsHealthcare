@model CsHealthcare.ViewModel.Patient.PatientModel

@{
    ViewBag.Title = "Cs-Healthcare | Insert Patient Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("SavePatient", "PatientAdmission", new { area = "Cabin" }, FormMethod.Post, new { @id = "sale_form", @class = "" }))
{
    <div ng-app="">
        <div class="row">


           
            <div class="col-md-12">
                <!-- BEGIN Portlet PORTLET-->
                <div class="portlet light">
                    <div class="portlet-title">
                        <div class="caption">
                            <i class="fa fa-question font-green-sharp"></i>
                            <span class="caption-subject font-green-sharp uppercase">Patient Information</span>
                        </div>
                        <div class="tools">
                            <a href="javascript:;" class="collapse">
                            </a>
                            <a href="javascript:;" class="fullscreen">
                            </a>
                        </div>
                        <div class="actions margin-right-10">

                        </div>
                    </div>
                    @*<hr style="margin-top: 0;">*@
                    <div class="portlet-body portlet-empty" style="min-height: 320px; margin-top: 20px">


                        <div class="modal-body">
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                
                                @*<input type="hidden" id="ReferenceName" name="ReferenceName" value=""/>*@

                                <div class="form-group">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-6">
                                            <input  ng-value="Name" id="Name" name="Name" class="form-control" />
                                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })


                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-6">
                                            <input  id="Age" required="" name="Age" value="" class="form-control " placeholder="" type="text" />
                                            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })


                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        @Html.LabelFor(model => model.Sex, htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-6">
                                            @*@Html.EditorFor(model => model.Sex, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })*@
                                            <select id="ddlSex" name="Sex" class="form-control">
                                                <option value="">Select</option>
                                                <option value="MALE">MALE</option>
                                                <option value="FEMALE">FEMALE</option>
                                            </select>
                                        </div>
                                    </div>
                                   

                                </div>


                               


                                <div class="form-group">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-6">

                                            <input  id="Address" name="Address" class="form-control" type="text" />
                                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-6">
                                            @*@Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control date-picker" } })*@
                                            <input ng-model="MobileNumber" id="MobileNumber" required="" name="MobileNumber" value="" class="form-control " placeholder="" type="text" />
                                            @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    @*</div>*@
                                </div>

                                <div class="form-group">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-6">
                                            @*@Html.EditorFor(model => model.BloodGroup, new {htmlAttributes = new {@class = "form-control"}})
                                                @Html.ValidationMessageFor(model => model.BloodGroup, "", new {@class = "text-danger"})*@

                                            <select id="ddlBloodGroup" name="BloodGroup" class="form-control">
                                                <option value="">Select</option>
                                                <option value="A+">A+</option>
                                                <option value="A-">A-</option>
                                                <option value="B+">B+</option>
                                                <option value="B-">B-</option>
                                                <option value="O+">O+</option>
                                                <option value="O-">O-</option>
                                                <option value="AB+">AB+</option>
                                                <option value="AB-">AB-</option>
                                            </select>

                                        </div>
                                    </div>

                                </div>

                                <div class="form-group">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.EducationId, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-6">
                                            <select id="ddlEducation" name="EducationId" class="form-control"></select>
                                                @Html.ValidationMessageFor(model => model.EducationId, "", new { @class = "text-danger" })
</div>
                                    </div>
                                    <div class="col-md-6">
                                        @*<div class="form-group">*@
                                        @Html.LabelFor(model => model.OccupationId, htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-6">
                                            <select id="ddlOccupation" name="OccupationId" class="form-control"></select>
                                            @Html.ValidationMessageFor(model => model.OccupationId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="form-group">
                                    <div class="col-md-6">
                                        @Html.LabelFor(model => model.ReferanceName, htmlAttributes: new { @class = "control-label col-md-6" })
                                        <div class="col-md-6">
                                            <input type="text" class="form-control" id="ReferanceName" name="ReferanceName" value=""/>
                                            @Html.ValidationMessageFor(model => model.ReferanceName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                   

                                </div>
                            </div>
                            <br /><br />

                        </div>


                    </div>
                </div>


            </div>
        </div>
        <div>



            

        </div>
        <div class="row">
            <div class="" style="text-align: center;">

                <a class="btn default" style="width: 15%;" href="@Url.Action("Index", "PatientAdmission", new {Area = "Cabin"})">Cancel</a>
                <input type="submit" value="Save" class="btn green" style="width: 15%;" />
            </div>
        </div>
    </div>
        @*<div id='myModal' class='modal fade in' tabindex="-1" data-backdrop="static" data-keyboard="false" style="margin: 0 auto;background-color: #fff; width: 600px;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div id='myModalContent'></div>
                </div>
            </div>
        </div>*@
}

@section page_styles {
    <link rel="stylesheet" type="text/css" href="~/Assets/global/plugins/select2/css/select2.css" />
    <link rel="stylesheet" type="text/css" href="~/Assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.css" />
    <link rel="stylesheet" type="text/css" href="~/Assets/global/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.min.css"/>
    <link href="~/assets/global/plugins/typeahead/typeahead.css" rel="stylesheet"/>
<style>
    .tt-query {
        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
    }

    .tt-hint {
        color: #999;
    }

    .tt-dropdown-menu { /* used to be tt-dropdown-menu in older versions */
        width: 422px;
        margin-top: 4px;
        padding: 4px 0;
        background-color: #fff;
        border: 1px solid #ccc;
        border: 1px solid rgba(0, 0, 0, 0.2);
        -webkit-border-radius: 4px;
        -moz-border-radius: 4px;
        border-radius: 4px;
        -webkit-box-shadow: 0 5px 10px rgba(0,0,0,.2);
        -moz-box-shadow: 0 5px 10px rgba(0,0,0,.2);
        box-shadow: 0 5px 10px rgba(0,0,0,.2);
    }

    .tt-suggestion {
        padding: 3px 20px;
        line-height: 24px;
    }

        .tt-suggestion.tt-cursor, .tt-suggestion:hover {
            color: #fff;
            background-color: #0097cf;
        }

        .tt-suggestion p {
            margin: 0;
        }
</style>
}

@section Scripts {
    <script type="text/javascript" src="~/Assets/global/plugins/select2/js/select2.min.js"></script>
    <script type="text/javascript" src="~/Assets/global/plugins/datatables/plugins/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="~/Assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js"></script>
    <script type="text/javascript" src="~/Assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Assets/Pages/components-pickers.js"></script>
<script src="~/Scripts/typeahead.bundle.min.js"></script>
    <script type="text/javascript" src="~/assets/global/plugins/jquery.webcam.js"></script>

    <script src="~/assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>

    <script>

        jQuery(document).ready(function () {
            //ComponentsPickers.init();
            LoadOccupation();
            LoadEducation();
            $(".datetimepicker").datepicker();

            initDoctorAutoComplete();
        });


        function initDoctorAutoComplete() {
            $('#ReferanceName').typeahead({
                hint: true,
                highlight: true,
                minLength: 2,
                limit: 8
            }, {
                source: function (searchString, cb) {
                    return $.ajax({
                        dataType: 'json',
                        type: 'POST',
                        contentType: "application/json; charset=utf-8",
                        url: " /Cabin/PatientAdmission/LoadDoctor",
                        data: "{'SearchString':'" + searchString + "'}",
                        chache: false,
                        success: function (data) {
                            var result = [];
                            $.each(data, function (index, val) {
                                result.push({
                                    Id: val.Id,
                                    Name: val.Name,
                                    value: val.Name
                                });
                            });
                            cb(result);
                        }
                    });
                }
            }).on("typeahead:selected", function (obj, patient) {
                
            });

        }
        function LoadOccupation() {
            //Metronic.blockUI();
            var options = $("#ddlOccupation");
            $.ajax({
                type: "GET",
                cache: false,
                url: "@(@Url.Action("LoadOccup", "PatientAdmission", new { Area = "Cabin" }))",
                data: {},
                dataType: "html",
                success: function (result) {
                    var t = JSON.parse(result);
                    $.each(t, function () {
                        options.append($("<option />").val(this.Id).text(this.Name));
                    });
                    LoadEducation();
                },
                error: function (error) {
                    //Metronic.unblockUI();
                    var msg = 'Fail to load occupation list';
                    alert(msg);
                }
            });
        }

        function LoadEducation() {
            var options = $("#ddlEducation");
            $.ajax({
                type: "GET",
                cache: false,
                url: "@(@Url.Action("LoadEdu", "PatientAdmission", new { Area = "Cabin" }))",
                data: {},
                dataType: "html",
                success: function (result) {
                    var t = JSON.parse(result);
                    $.each(t, function () {
                        options.append($("<option />").val(this.Id).text(this.DegreeName));
                    });
                },
                error: function (error) {
                    //Metronic.unblockUI();
                    var msg = 'Fail to load occupation list';
                    alert(msg);
                }
            });
        }




        function SavePatientInformation() {
            $.ajax({
                type: "GET",
                cache: false,
                url: "@(@Url.Action("SavePatient", "PatientAdmission", new { Area = "Cabin" }))",
                data: {
                    "patientName": $('#txtPatientName').val(),
                    "fatherName": $('#txtFatherName').val(),
                    "motherName": $('#txtMotherName').val(),
                    "referenceName": $('#txtRefName').val(),
                    "patientCode": $('#txtPatientCode').val(),
                    "bloodGroup": $('#ddlBloodGroup').val(),
                    "address": $('#txtAddresse').val(),
                    "sex": $('#ddlSex').val(),
                    "occupationId": $('#ddlOccupation').val(),
                    "educationId": $('#ddlEducation').val(),
                    "mobileNo": $('#txtMobileNo').val(),
                    "Age": $('#Age').val()
                },
                dataType: "html",
                success: function (result) {
                    //Metronic.unblockUI();
                    $('#txtPatientCode').value(result.PatientCode);
                    window.location = Create();
                },
                error: function (error) {
                    //Metronic.unblockUI();
                    var msg = 'Fail to update patient information';
                    alert(msg);
                }
            });
        }
        function Create() {
            $.ajax({
                type: "GET",
                cache: false,
                url: "@(@Url.Action("Create1", "PatientAdmission", new { Area = "Cabin" }))",
                data: {
                    "patientName": $('#txtPatientName').val(),
                    
                    "patientCode": $('#txtPatientCode').val(),
                   
                },
            dataType: "html",
            success: function (result) {
                //Metronic.unblockUI();
                
            },
            error: function (error) {
                //Metronic.unblockUI();
                var msg = 'Fail to update patient information';
                alert(msg);
            }
        });
        }
        function goBack() {
            window.location = "@(@Url.Action("Index", "PatientAdmission", new { Area = "Cabin" }))";
        }

        function getTodate() {
            var dob = new Date();
            var day = (dob.getDate() < 10 ? '0' : '') + dob.getDate();
            var month = ((dob.getMonth() + 1) < 10 ? '0' : '') + (dob.getMonth() + 1);
            return (month + "/" + day + "/" + dob.getFullYear());
        }

        function searchValidationCheck() {
            if ($('#txtAppointmentDate').val() == "") {
                alert("Please insert appointment date.");
                $('#txtAppointmentDate').focus();
                return false;
            } else {
                return true;
            }
        }

    </script>

}

